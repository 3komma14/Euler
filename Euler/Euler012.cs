using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Euler
{
    /// <summary>
    /// The sequence of triangle numbers is generated by adding the natural numbers. 
    /// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
    /// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    /// Let us list the factors of the first seven triangle numbers:
    ///  1: 1
    ///  3: 1,3
    ///  6: 1,2,3,6
    /// 10: 1,2,5,10
    /// 15: 1,3,5,15
    /// 21: 1,3,7,21
    /// 28: 1,2,4,7,14,28
    /// 
    /// We can see that 28 is the first triangle number to have over five divisors.
    /// What is the value of the first triangle number to have over five hundred divisors?
    /// </summary>
    public class Euler012 : IEulerProblem
    {
        public string Solve()
        {
            long result = 0;
            long lastTriangleNumber = 0;
            long i = 1;
            while (result == 0)
            {
                var triangleNumber = lastTriangleNumber + i;
                var factors = CountFactors(triangleNumber);
                Console.WriteLine("Triangle Number({0}) = {1}, factors = {2}", i, triangleNumber, factors);

                //Next
                i++;
                lastTriangleNumber = triangleNumber;
                if (factors > 500)
                {
                    result = triangleNumber;
                    break;
                }
            }

            return string.Format("Result = {0}", result);
        }

        private long CountFactors(long value)
        {
            long result = 1;
            for (long i = 2; i < Math.Sqrt(value); i++)
            {
                if ((value % i) == 0)
                {
                    result++;
                }
            }
            return result*2;
        }


    }
}
